class SimpleDate:
    def __init__(self, day: int, month: int, year: int):
        if 1 <= month <= 12:
            max_day = self.days_in_month(month, year)
            if 1 <= day <= max_day:
                self._day = day
            else:
                raise ValueError(f"Invalid day {day} for month {month} in year {year}")
            self._month = month
        else:
            raise ValueError(f"Invalid month {month}")

        if year > 0:
            self._year = year
        else:
            raise ValueError(f"Invalid year {year}")

    @staticmethod
    def is_leap_year(year):
        # Leap year if divisible by 400 or divisible by 4 but not by 100
        return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)

    @classmethod
    def days_in_month(cls, month, year):
        if month in [1, 3, 5, 7, 8, 10, 12]:
            return 31
        elif month in [4, 6, 9, 11]:
            return 30
        elif month == 2:
            return 29 if cls.is_leap_year(year) else 28
        else:
            raise ValueError("Invalid month")

    def __eq__(self, another):
        return (self._day, self._month, self._year) == (another._day, another._month, another._year)

    def __lt__(self, another):
        return (self._year, self._month, self._day) < (another._year, another._month, another._day)

    def __gt__(self, another):
        return (self._year, self._month, self._day) > (another._year, another._month, another._day)

    def __add__(self, days):
        day = self._day + days
        month = self._month
        year = self._year

        while True:
            max_day = self.days_in_month(month, year)
            if day <= max_day:
                break
            day -= max_day
            month += 1
            if month > 12:
                month = 1
                year += 1

        return SimpleDate(day, month, year)

    def to_ordinal(self):
        """Calculate number of days since 0001-01-01"""
        days = 0
        for y in range(1, self._year):
            days += 366 if self.is_leap_year(y) else 365

        for m in range(1, self._month):
            days += self.days_in_month(m, self._year)

        days += self._day
        return days

    def __sub__(self, another):
        return abs(self.to_ordinal() - another.to_ordinal())

    def __str__(self):
        return f"{self._day}.{self._month}.{self._year}
